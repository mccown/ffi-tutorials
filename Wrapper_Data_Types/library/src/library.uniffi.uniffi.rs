// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// Check for compatibility between `uniffi` and `uniffi_bindgen` versions.
// Note that we have an error message on the same line as the assertion.
// This is important, because if the assertion fails, the compiler only
// seems to show that single line as context for the user.
uniffi::assert_compatible_version!("0.14.0"); // Please check that you depend on version 0.14.0 of the `uniffi` crate.

// Everybody gets basic buffer support, since it's needed for passing complex types over the FFI.

/// This helper allocates a new byte buffer owned by the Rust code, and returns it
/// to the foreign-language code as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_library_995e_rustbuffer_alloc(
    size: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        uniffi::RustBuffer::new_with_size(size.max(0) as usize)
    })
}

/// This helper copies bytes owned by the foreign-language code into a new byte buffer owned
/// by the Rust code, and returns it as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
///
/// # Safety
/// This function will dereference a provided pointer in order to copy bytes from it, so
/// make sure the `ForeignBytes` struct contains a valid pointer and length.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_library_995e_rustbuffer_from_bytes(
    bytes: uniffi::ForeignBytes,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        let bytes = bytes.as_slice();
        uniffi::RustBuffer::from_vec(bytes.to_vec())
    })
}

/// Free a byte buffer that had previously been passed to the foreign language code.
///
/// # Safety
/// The argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_library_995e_rustbuffer_free(
    buf: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::call_with_output(call_status, || uniffi::RustBuffer::destroy(buf))
}

/// Reserve additional capacity in a byte buffer that had previously been passed to the
/// foreign language code.
///
/// The first argument *must* be a uniquely-owned `RustBuffer` previously
/// obtained from a call into the Rust code that returned a buffer. Its underlying data pointer
/// will be reallocated if necessary and returned in a new `RustBuffer` struct.
///
/// The second argument must be the minimum number of *additional* bytes to reserve
/// capacity for in the buffer; it is likely to reserve additional capacity in practice
/// due to amortized growth strategy of Rust vectors.
///
/// # Safety
/// The first argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_library_995e_rustbuffer_reserve(
    buf: uniffi::RustBuffer,
    additional: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        use std::convert::TryInto;
        let additional: usize = additional
            .try_into()
            .expect("additional buffer length negative or overflowed");
        let mut v = buf.destroy_into_vec();
        v.reserve(additional);
        uniffi::RustBuffer::from_vec(v)
    })
}

// Error definitions, corresponding to `error` in the UDL.

pub struct FfiConverterTypeArithmeticError;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeArithmeticError {
    type RustType = ArithmeticError;

    // For "flat" error enums, we stringify the error on the Rust side and surface that
    // as the error message in the foreign language.

    fn write(obj: ArithmeticError, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        let msg = obj.to_string();
        match obj {
            ArithmeticError::IntegerOverflow { .. } => {
                buf.put_i32(1);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
        };
    }

    fn try_read(_buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<ArithmeticError> {
        // It's not currently possible to send errors from the foreign language *into* Rust.
        panic!("try_read not supported for flat errors");
    }
}

impl uniffi::FfiError for FfiConverterTypeArithmeticError {}

// Enum defitions, corresponding to `enum` in UDL.

// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.

pub struct FfiConverterTypePoint;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypePoint {
    type RustType = Point;

    fn write(obj: Point, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <f64 as uniffi::FfiConverter>::write(obj.x, buf);
        <f64 as uniffi::FfiConverter>::write(obj.y, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<Point> {
        Ok(Point {
            x: <f64 as uniffi::FfiConverter>::try_read(buf)?,
            y: <f64 as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

// Top level functions, corresponding to UDL `namespace` functions.

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_bool_inc_test(
    value: i8,
    call_status: &mut uniffi::RustCallStatus,
) -> i8 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_bool_inc_test");

    uniffi::call_with_output(call_status, || {
        <bool as uniffi::FfiConverter>::lower(bool_inc_test(
            <bool as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_i8_inc_test(
    value: i8,
    call_status: &mut uniffi::RustCallStatus,
) -> i8 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_i8_inc_test");

    uniffi::call_with_output(call_status, || {
        <i8 as uniffi::FfiConverter>::lower(i8_inc_test(
            <i8 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_i16_inc_test(
    value: i16,
    call_status: &mut uniffi::RustCallStatus,
) -> i16 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_i16_inc_test");

    uniffi::call_with_output(call_status, || {
        <i16 as uniffi::FfiConverter>::lower(i16_inc_test(
            <i16 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_i32_inc_test(
    value: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> i32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_i32_inc_test");

    uniffi::call_with_output(call_status, || {
        <i32 as uniffi::FfiConverter>::lower(i32_inc_test(
            <i32 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_i64_inc_test(
    value: i64,
    call_status: &mut uniffi::RustCallStatus,
) -> i64 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_i64_inc_test");

    uniffi::call_with_output(call_status, || {
        <i64 as uniffi::FfiConverter>::lower(i64_inc_test(
            <i64 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_u8_inc_test(
    value: u8,
    call_status: &mut uniffi::RustCallStatus,
) -> u8 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_u8_inc_test");

    uniffi::call_with_output(call_status, || {
        <u8 as uniffi::FfiConverter>::lower(u8_inc_test(
            <u8 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_u16_inc_test(
    value: u16,
    call_status: &mut uniffi::RustCallStatus,
) -> u16 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_u16_inc_test");

    uniffi::call_with_output(call_status, || {
        <u16 as uniffi::FfiConverter>::lower(u16_inc_test(
            <u16 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_u32_inc_test(
    value: u32,
    call_status: &mut uniffi::RustCallStatus,
) -> u32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_u32_inc_test");

    uniffi::call_with_output(call_status, || {
        <u32 as uniffi::FfiConverter>::lower(u32_inc_test(
            <u32 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_u64_inc_test(
    value: u64,
    call_status: &mut uniffi::RustCallStatus,
) -> u64 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_u64_inc_test");

    uniffi::call_with_output(call_status, || {
        <u64 as uniffi::FfiConverter>::lower(u64_inc_test(
            <u64 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_float_inc_test(
    value: f32,
    call_status: &mut uniffi::RustCallStatus,
) -> f32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_float_inc_test");

    uniffi::call_with_output(call_status, || {
        <f32 as uniffi::FfiConverter>::lower(float_inc_test(
            <f32 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_double_inc_test(
    value: f64,
    call_status: &mut uniffi::RustCallStatus,
) -> f64 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_double_inc_test");

    uniffi::call_with_output(call_status, || {
        <f64 as uniffi::FfiConverter>::lower(double_inc_test(
            <f64 as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_string_inc_test(
    value: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_string_inc_test");

    uniffi::call_with_output(call_status, || {
        <String as uniffi::FfiConverter>::lower(string_inc_test(
            <String as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_byref_inc_test(
    value: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_byref_inc_test");

    uniffi::call_with_output(call_status, || {
        <FfiConverterTypePoint as uniffi::FfiConverter>::lower(byref_inc_test(
            &<FfiConverterTypePoint as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_optional_type_inc_test(
    value: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_optional_type_inc_test");

    uniffi::call_with_output(call_status, || {
        <std::option::Option<i32> as uniffi::FfiConverter>::lower(optional_type_inc_test(
            <std::option::Option<i32> as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_vector_inc_test(
    value: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_vector_inc_test");

    uniffi::call_with_output(call_status, || {
        <std::vec::Vec<String> as uniffi::FfiConverter>::lower(vector_inc_test(
            <std::vec::Vec<String> as uniffi::FfiConverter>::try_lift(value).unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_hash_map_inc_test(
    value: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_hash_map_inc_test");

    uniffi::call_with_output(call_status, || {
        <std::collections::HashMap<String, i32> as uniffi::FfiConverter>::lower(hash_map_inc_test(
            <std::collections::HashMap<String, i32> as uniffi::FfiConverter>::try_lift(value)
                .unwrap(),
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_void_inc_test(value: i32, call_status: &mut uniffi::RustCallStatus) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_void_inc_test");

    uniffi::call_with_output(call_status, || {
        void_inc_test(<i32 as uniffi::FfiConverter>::try_lift(value).unwrap())
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn library_995e_error_inc_test(
    a: u64,
    b: u64,
    call_status: &mut uniffi::RustCallStatus,
) -> u64 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("library_995e_error_inc_test");

    uniffi::call_with_result(call_status, || {
        let _retval = error_inc_test(
            <u64 as uniffi::FfiConverter>::try_lift(a).unwrap(),
            <u64 as uniffi::FfiConverter>::try_lift(b).unwrap(),
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeArithmeticError as uniffi::FfiConverter>::lower)?;
        Ok(<u64 as uniffi::FfiConverter>::lower(_retval))
    })
}
// Object definitions, corresponding to UDL `interface` definitions.

// Callback Interface definitions, corresponding to UDL `callback interface` definitions.

// External and Wrapped types
// Support for external types.

// Types with an external `FfiConverter`...

// More complicated locally `Wrapped` types - we generate FfiConverter.
