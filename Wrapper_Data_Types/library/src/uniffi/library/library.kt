// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.library;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data", "padding")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for this weird "padding" field.
    @JvmField var padding: Long = 0

    class ByValue : RustBuffer(), Structure.ByValue

    companion object {
        internal fun alloc(size: Int = 0) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_library_8bbb_rustbuffer_alloc(size, err)
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_library_8bbb_rustbuffer_free(buf, err)
        }

        internal fun reserve(buf: RustBuffer.ByValue, additional: Int) = rustCall(InternalError.ByReference()) { err ->
            _UniFFILib.INSTANCE.ffi_library_8bbb_rustbuffer_reserve(buf, additional, err)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data", "padding", "padding2")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for these weird "padding" fields.
    @JvmField var padding: Long = 0
    @JvmField var padding2: Int = 0

    class ByValue : ForeignBytes(), Structure.ByValue
}


// A helper for structured writing of data into a `RustBuffer`.
// This is very similar to `java.nio.ByteBuffer` but it knows how to grow
// the underlying `RustBuffer` on demand.
//
// TODO: we should benchmark writing things into a `RustBuffer` versus building
// up a bytearray and then copying it across.

class RustBufferBuilder() {
    var rbuf = RustBuffer.ByValue()
    var bbuf: ByteBuffer? = null

    init {
        val rbuf = RustBuffer.alloc(16) // Totally arbitrary initial size
        rbuf.writeField("len", 0)
        this.setRustBuffer(rbuf)
    }

    internal fun setRustBuffer(rbuf: RustBuffer.ByValue) {
        this.rbuf = rbuf
        this.bbuf = this.rbuf.data?.getByteBuffer(0, this.rbuf.capacity.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
            it.position(rbuf.len)
        }
    }

    fun finalize() : RustBuffer.ByValue {
        val rbuf = this.rbuf
        // Ensure that the JVM-level field is written through to native memory
        // before turning the buffer, in case its recipient uses it in a context
        // JNA doesn't apply its automatic synchronization logic.
        rbuf.writeField("len", this.bbuf!!.position())
        this.setRustBuffer(RustBuffer.ByValue())
        return rbuf
    }

    fun discard() {
        val rbuf = this.finalize()
        RustBuffer.free(rbuf)
    }

    internal fun reserve(size: Int, write: (ByteBuffer) -> Unit) {
        // TODO: this will perform two checks to ensure we're not overflowing the buffer:
        // one here where we check if it needs to grow, and another when we call a write
        // method on the ByteBuffer. It might be cheaper to use exception-driven control-flow
        // here, trying the write and growing if it throws a `BufferOverflowException`.
        // Benchmarking needed.
        if (this.bbuf!!.position() + size > this.rbuf.capacity) {
            rbuf.writeField("len", this.bbuf!!.position())
            this.setRustBuffer(RustBuffer.reserve(this.rbuf, size))
        }
        write(this.bbuf!!)
    }

    fun putByte(v: Byte) {
        this.reserve(1) { bbuf ->
            bbuf.put(v)
        }
    }

    fun putShort(v: Short) {
        this.reserve(2) { bbuf ->
            bbuf.putShort(v)
        }
    }

    fun putInt(v: Int) {
        this.reserve(4) { bbuf ->
            bbuf.putInt(v)
        }
    }

    fun putLong(v: Long) {
        this.reserve(8) { bbuf ->
            bbuf.putLong(v)
        }
    }

    fun putFloat(v: Float) {
        this.reserve(4) { bbuf ->
            bbuf.putFloat(v)
        }
    }

    fun putDouble(v: Double) {
        this.reserve(8) { bbuf ->
            bbuf.putDouble(v)
        }
    }

    fun put(v: ByteArray) {
        this.reserve(v.size) { bbuf ->
            bbuf.put(v)
        }
    }
}

// Helpers for reading primitive data types from a bytebuffer.

internal fun<T> liftFromRustBuffer(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T {
    val buf = rbuf.asByteBuffer()!!
    try {
       val item = readItem(buf)
       if (buf.hasRemaining()) {
           throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
       }
       return item
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun<T> lowerIntoRustBuffer(v: T, writeItem: (T, RustBufferBuilder) -> Unit): RustBuffer.ByValue {
    // TODO: maybe we can calculate some sort of initial size hint?
    val buf = RustBufferBuilder()
    try {
        writeItem(v, buf)
        return buf.finalize()
    } catch (e: Throwable) {
        buf.discard()
        throw e
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.




@ExperimentalUnsignedTypes
internal fun UByte.Companion.lift(v: Byte): UByte {
    return v.toUByte()
}

@ExperimentalUnsignedTypes
internal fun UByte.Companion.read(buf: ByteBuffer): UByte {
    return UByte.lift(buf.get())
}

@ExperimentalUnsignedTypes
internal fun UByte.lower(): Byte {
    return this.toByte()
}

@ExperimentalUnsignedTypes
internal fun UByte.write(buf: RustBufferBuilder) {
    buf.putByte(this.toByte())
}





internal fun Byte.Companion.lift(v: Byte): Byte {
    return v
}

internal fun Byte.Companion.read(buf: ByteBuffer): Byte {
    return buf.get()
}

internal fun Byte.lower(): Byte {
    return this
}

internal fun Byte.write(buf: RustBufferBuilder) {
    buf.putByte(this)
}





@ExperimentalUnsignedTypes
internal fun UShort.Companion.lift(v: Short): UShort {
    return v.toUShort()
}

@ExperimentalUnsignedTypes
internal fun UShort.Companion.read(buf: ByteBuffer): UShort {
    return UShort.lift(buf.getShort())
}

@ExperimentalUnsignedTypes
internal fun UShort.lower(): Short {
    return this.toShort()
}

@ExperimentalUnsignedTypes
internal fun UShort.write(buf: RustBufferBuilder) {
    buf.putShort(this.toShort())
}





internal fun Short.Companion.lift(v: Short): Short {
    return v
}

internal fun Short.Companion.read(buf: ByteBuffer): Short {
    return buf.getShort()
}

internal fun Short.lower(): Short {
    return this
}

internal fun Short.write(buf: RustBufferBuilder) {
    buf.putShort(this)
}





@ExperimentalUnsignedTypes
internal fun UInt.Companion.lift(v: Int): UInt {
    return v.toUInt()
}

@ExperimentalUnsignedTypes
internal fun UInt.Companion.read(buf: ByteBuffer): UInt {
    return UInt.lift(buf.getInt())
}

@ExperimentalUnsignedTypes
internal fun UInt.lower(): Int {
    return this.toInt()
}

@ExperimentalUnsignedTypes
internal fun UInt.write(buf: RustBufferBuilder) {
    buf.putInt(this.toInt())
}





internal fun Int.Companion.lift(v: Int): Int {
    return v
}

internal fun Int.Companion.read(buf: ByteBuffer): Int {
    return buf.getInt()
}

internal fun Int.lower(): Int {
    return this
}

internal fun Int.write(buf: RustBufferBuilder) {
    buf.putInt(this)
}





@ExperimentalUnsignedTypes
internal fun ULong.Companion.lift(v: Long): ULong {
    return v.toULong()
}

@ExperimentalUnsignedTypes
internal fun ULong.Companion.read(buf: ByteBuffer): ULong {
    return ULong.lift(buf.getLong())
}

@ExperimentalUnsignedTypes
internal fun ULong.lower(): Long {
    return this.toLong()
}

@ExperimentalUnsignedTypes
internal fun ULong.write(buf: RustBufferBuilder) {
    buf.putLong(this.toLong())
}





internal fun Long.Companion.lift(v: Long): Long {
    return v
}

internal fun Long.Companion.read(buf: ByteBuffer): Long {
    return buf.getLong()
}

internal fun Long.lower(): Long {
    return this
}

internal fun Long.write(buf: RustBufferBuilder) {
    buf.putLong(this)
}





internal fun Float.Companion.lift(v: Float): Float {
    return v
}

internal fun Float.Companion.read(buf: ByteBuffer): Float {
    return buf.getFloat()
}

internal fun Float.lower(): Float {
    return this
}

internal fun Float.write(buf: RustBufferBuilder) {
    buf.putFloat(this)
}





internal fun Double.Companion.lift(v: Double): Double {
    return v
}

internal fun Double.Companion.read(buf: ByteBuffer): Double {
    val v = buf.getDouble()
    return v
}

internal fun Double.lower(): Double {
    return this
}

internal fun Double.write(buf: RustBufferBuilder) {
    buf.putDouble(this)
}





internal fun Boolean.Companion.lift(v: Byte): Boolean {
    return v.toInt() != 0
}

internal fun Boolean.Companion.read(buf: ByteBuffer): Boolean {
    return Boolean.lift(buf.get())
}

internal fun Boolean.lower(): Byte {
    return if (this) 1.toByte() else 0.toByte()
}

internal fun Boolean.write(buf: RustBufferBuilder) {
    buf.putByte(this.lower())
}





internal fun String.Companion.lift(rbuf: RustBuffer.ByValue): String {
    try {
        val byteArr = ByteArray(rbuf.len)
        rbuf.asByteBuffer()!!.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun String.Companion.read(buf: ByteBuffer): String {
    val len = buf.getInt()
    val byteArr = ByteArray(len)
    buf.get(byteArr)
    return byteArr.toString(Charsets.UTF_8)
}

internal fun String.lower(): RustBuffer.ByValue {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
    // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
    val rbuf = RustBuffer.alloc(byteArr.size)
    rbuf.asByteBuffer()!!.put(byteArr)
    return rbuf
}

internal fun String.write(buf: RustBufferBuilder) {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    buf.putInt(byteArr.size)
    buf.put(byteArr)
}




















// Helper functions for pasing values of type Int?

internal fun liftOptionali32(rbuf: RustBuffer.ByValue): Int? {
    return liftFromRustBuffer(rbuf) { buf ->
        readOptionali32(buf)
    }
}

internal fun readOptionali32(buf: ByteBuffer): Int? {
    if (buf.get().toInt() == 0) {
        return null
    }
    return Int.read(buf)
}

internal fun lowerOptionali32(v: Int?): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeOptionali32(v, buf)
    }
}

internal fun writeOptionali32(v: Int?, buf: RustBufferBuilder) {
    if (v == null) {
        buf.putByte(0)
    } else {
        buf.putByte(1)
        v.write(buf)
    }
}







// Helper functions for pasing values of type List<String>

internal fun liftSequencestring(rbuf: RustBuffer.ByValue): List<String> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequencestring(buf)
    }
}

internal fun readSequencestring(buf: ByteBuffer): List<String> {
    val len = buf.getInt()
    return List<String>(len) {
        String.read(buf)
    }
}

internal fun lowerSequencestring(v: List<String>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequencestring(v, buf)
    }
}

internal fun writeSequencestring(v: List<String>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}







// Helper functions for pasing values of type Map<String, Int>

internal fun liftMapi32(rbuf: RustBuffer.ByValue): Map<String, Int> {
    return liftFromRustBuffer(rbuf) { buf ->
        readMapi32(buf)
    }
}

internal fun readMapi32(buf: ByteBuffer): Map<String, Int> {
    // TODO: Once Kotlin's `buildMap` API is stabilized we should use it here.
    val items : MutableMap<String, Int> = mutableMapOf()
    val len = buf.getInt()
    repeat(len) {
        val k = String.read(buf)
        val v = Int.read(buf)
        items[k] = v
    }
    return items
}

internal fun lowerMapi32(m: Map<String, Int>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(m) { m, buf ->
        writeMapi32(m, buf)
    }
}

internal fun writeMapi32(v: Map<String, Int>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    // The parens on `(k, v)` here ensure we're calling the right method,
    // which is important for compatibility with older android devices.
    // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
    v.forEach { (k, v) ->
        k.write(buf)
        v.write(buf)
    }
}




@Synchronized
fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.${componentName}.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_library"
}

inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy { 
            loadIndirect<_UniFFILib>(componentName = "library")
            
            
        }
    }

    fun library_8bbb_bool_inc_test(value: Byte
    , uniffi_out_err: Structure.ByReference
    ): Byte

    fun library_8bbb_i8_inc_test(value: Byte
    , uniffi_out_err: Structure.ByReference
    ): Byte

    fun library_8bbb_i16_inc_test(value: Short
    , uniffi_out_err: Structure.ByReference
    ): Short

    fun library_8bbb_i32_inc_test(value: Int
    , uniffi_out_err: Structure.ByReference
    ): Int

    fun library_8bbb_i64_inc_test(value: Long
    , uniffi_out_err: Structure.ByReference
    ): Long

    fun library_8bbb_u8_inc_test(value: Byte
    , uniffi_out_err: Structure.ByReference
    ): Byte

    fun library_8bbb_u16_inc_test(value: Short
    , uniffi_out_err: Structure.ByReference
    ): Short

    fun library_8bbb_u32_inc_test(value: Int
    , uniffi_out_err: Structure.ByReference
    ): Int

    fun library_8bbb_u64_inc_test(value: Long
    , uniffi_out_err: Structure.ByReference
    ): Long

    fun library_8bbb_float_inc_test(value: Float
    , uniffi_out_err: Structure.ByReference
    ): Float

    fun library_8bbb_double_inc_test(value: Double
    , uniffi_out_err: Structure.ByReference
    ): Double

    fun library_8bbb_string_inc_test(value: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun library_8bbb_byref_inc_test(value: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun library_8bbb_optional_type_inc_test(value: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun library_8bbb_vector_inc_test(value: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun library_8bbb_hash_map_inc_test(value: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun library_8bbb_void_inc_test(value: Int
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun library_8bbb_error_inc_test(a: Long,b: Long
    , uniffi_out_err: Structure.ByReference
    ): Long

    fun ffi_library_8bbb_rustbuffer_alloc(size: Int
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_library_8bbb_rustbuffer_from_bytes(bytes: ForeignBytes.ByValue
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_library_8bbb_rustbuffer_free(buf: RustBuffer.ByValue
    , uniffi_out_err: Structure.ByReference
    ): Unit

    fun ffi_library_8bbb_rustbuffer_reserve(buf: RustBuffer.ByValue,additional: Int
    , uniffi_out_err: Structure.ByReference
    ): RustBuffer.ByValue

    fun ffi_library_8bbb_string_free(cstr: Pointer
    , uniffi_out_err: Structure.ByReference
    ): Unit

    
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.







// Public interface members begin here.
// Public facing enums
// Error definitions
interface RustErrorReference : Structure.ByReference {
    fun isFailure(): Boolean
    fun<E: Exception> intoException(): E
    fun ensureConsumed()
    fun getMessage(): String?
    fun consumeErrorMessage(): String
}

@Structure.FieldOrder("code", "message")
internal open class RustError : Structure() {
   open class ByReference: RustError(), RustErrorReference

    @JvmField var code: Int = 0
    @JvmField var message: Pointer? = null

    /**
     * Does this represent success?
     */
    fun isSuccess(): Boolean {
        return code == 0
    }

    /**
     * Does this represent failure?
     */
    fun isFailure(): Boolean {
        return code != 0
    }

    @Synchronized
    fun ensureConsumed() {
        if (this.message != null) {
            rustCall(InternalError.ByReference()) { err ->
                _UniFFILib.INSTANCE.ffi_library_8bbb_string_free(this.message!!, err)
             }
            this.message = null
        }
    }

    /**
     * Get the error message or null if there is none.
     */
    fun getMessage(): String? {
        return this.message?.getString(0, "utf8")
    }

    /**
     * Get and consume the error message, or null if there is none.
     */
    @Synchronized
    fun consumeErrorMessage(): String {
        val result = this.getMessage()
        if (this.message != null) {
            this.ensureConsumed()
        }
        if (result == null) {
            throw NullPointerException("consumeErrorMessage called with null message!")
        }
        return result
    }

    @Suppress("ReturnCount", "TooGenericExceptionThrown")
    open fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        this.consumeErrorMessage()
        throw RuntimeException("Generic errors are not implemented yet")
    }
}

internal open class InternalError : RustError() {
    class ByReference: InternalError(), RustErrorReference

    @Suppress("ReturnCount", "TooGenericExceptionThrown", "UNCHECKED_CAST")
    override fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        val message = this.consumeErrorMessage()
        return InternalException(message) as E
    }
}

class InternalException(message: String) : Exception(message)
internal open class ArithmeticError : RustError() {
    class ByReference: ArithmeticError(), RustErrorReference

    @Suppress("ReturnCount", "TooGenericExceptionThrown", "UNCHECKED_CAST")
    override fun<E: Exception> intoException(): E {
        if (!isFailure()) {
            // It's probably a bad idea to throw here! We're probably leaking something if this is
            // ever hit! (But we shouldn't ever hit it?)
            throw RuntimeException("[Bug] intoException called on non-failure!")
        }
        val message = this.consumeErrorMessage()
        when (code) {
            1 -> return ArithmeticErrorException.IntegerOverflow(message) as E
            else -> throw RuntimeException("Invalid error received: $code, $message")
        }
    }
}

open class ArithmeticErrorException(message: String) : Exception(message) {
    class IntegerOverflow(msg: String) : ArithmeticErrorException(msg)
    
}



// Helpers for calling Rust with errors:
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
private inline fun <U, E: RustErrorReference> nullableRustCall(callback: (E) -> U?, err: E): U? {
    try {
        val ret = callback(err)
        if (err.isFailure()) {
            throw err.intoException()
        }
        return ret
    } finally {
        // This only matters if `callback` throws (or does a non-local return, which
        // we currently don't do)
        err.ensureConsumed()
    }
}

private inline fun <U, E: RustErrorReference> rustCall(err: E, callback: (E) -> U?): U {
    return nullableRustCall(callback, err)!!
}

// Public facing records
data class Point (
    var x: Double, 
    var y: Double 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): Point {
            return liftFromRustBuffer(rbuf) { buf -> Point.read(buf) }
        }

        internal fun read(buf: ByteBuffer): Point {
            return Point(
            Double.read(buf),
            Double.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.x.write(buf)
        
            this.y.write(buf)
        
    }

    
    
}


// Namespace functions



fun boolIncTest(value: Boolean ): Boolean {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_bool_inc_test(value.lower() ,err)
}
    return Boolean.lift(_retval)
}




fun i8IncTest(value: Byte ): Byte {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_i8_inc_test(value.lower() ,err)
}
    return Byte.lift(_retval)
}




fun i16IncTest(value: Short ): Short {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_i16_inc_test(value.lower() ,err)
}
    return Short.lift(_retval)
}




fun i32IncTest(value: Int ): Int {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_i32_inc_test(value.lower() ,err)
}
    return Int.lift(_retval)
}




fun i64IncTest(value: Long ): Long {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_i64_inc_test(value.lower() ,err)
}
    return Long.lift(_retval)
}




fun u8IncTest(value: UByte ): UByte {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_u8_inc_test(value.lower() ,err)
}
    return UByte.lift(_retval)
}




fun u16IncTest(value: UShort ): UShort {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_u16_inc_test(value.lower() ,err)
}
    return UShort.lift(_retval)
}




fun u32IncTest(value: UInt ): UInt {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_u32_inc_test(value.lower() ,err)
}
    return UInt.lift(_retval)
}




fun u64IncTest(value: ULong ): ULong {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_u64_inc_test(value.lower() ,err)
}
    return ULong.lift(_retval)
}




fun floatIncTest(value: Float ): Float {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_float_inc_test(value.lower() ,err)
}
    return Float.lift(_retval)
}




fun doubleIncTest(value: Double ): Double {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_double_inc_test(value.lower() ,err)
}
    return Double.lift(_retval)
}




fun stringIncTest(value: String ): String {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_string_inc_test(value.lower() ,err)
}
    return String.lift(_retval)
}




fun byrefIncTest(value: Point ): Point {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_byref_inc_test(value.lower() ,err)
}
    return Point.lift(_retval)
}




fun optionalTypeIncTest(value: Int? ): Int? {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_optional_type_inc_test(lowerOptionali32(value) ,err)
}
    return liftOptionali32(_retval)
}




fun vectorIncTest(value: List<String> ): List<String> {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_vector_inc_test(lowerSequencestring(value) ,err)
}
    return liftSequencestring(_retval)
}




fun hashMapIncTest(value: Map<String, Int> ): Map<String, Int> {
    val _retval = rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_hash_map_inc_test(lowerMapi32(value) ,err)
}
    return liftMapi32(_retval)
}




fun voidIncTest(value: Int ) =
    rustCall(
    InternalError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_void_inc_test(value.lower() ,err)
}




fun errorIncTest(a: ULong, b: ULong ): ULong {
    val _retval = rustCall(ArithmeticError.ByReference()
) { err ->
    _UniFFILib.INSTANCE.library_8bbb_error_inc_test(a.lower(), b.lower() ,err)
}
    return ULong.lift(_retval)
}



// Objects


// Callback Interfaces


