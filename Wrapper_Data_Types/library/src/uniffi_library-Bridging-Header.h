// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version in UNIFFI_SHARED_HEADER_V1
    #ifndef UNIFFI_SHARED_HEADER_V1
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V1
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V1
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version in all instance of UNIFFI_SHARED_HEADER_V1 in this file.                   ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for this weird "padding" field.
    int64_t padding;
} RustBuffer;

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
    // Ref https://github.com/mozilla/uniffi-rs/issues/334 for these weird "padding" fields.
    int64_t padding;
    int32_t padding2;
} ForeignBytes;

// Error definitions
// Each error has an error code enum, and a struct
typedef struct NativeRustError {
    int32_t code;
    char *_Nullable message;
} NativeRustError;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version in all instance of UNIFFI_SHARED_HEADER_V1 in this file.                   ⚠️
#endif // def UNIFFI_SHARED_H
  
int8_t library_c453_bool_inc_test(
      int8_t value
    ,NativeRustError *_Nonnull out_err
    );
int8_t library_c453_i8_inc_test(
      int8_t value
    ,NativeRustError *_Nonnull out_err
    );
int16_t library_c453_i16_inc_test(
      int16_t value
    ,NativeRustError *_Nonnull out_err
    );
int32_t library_c453_i32_inc_test(
      int32_t value
    ,NativeRustError *_Nonnull out_err
    );
int64_t library_c453_i64_inc_test(
      int64_t value
    ,NativeRustError *_Nonnull out_err
    );
uint8_t library_c453_u8_inc_test(
      uint8_t value
    ,NativeRustError *_Nonnull out_err
    );
uint16_t library_c453_u16_inc_test(
      uint16_t value
    ,NativeRustError *_Nonnull out_err
    );
uint32_t library_c453_u32_inc_test(
      uint32_t value
    ,NativeRustError *_Nonnull out_err
    );
uint64_t library_c453_u64_inc_test(
      uint64_t value
    ,NativeRustError *_Nonnull out_err
    );
float library_c453_float_inc_test(
      float value
    ,NativeRustError *_Nonnull out_err
    );
double library_c453_double_inc_test(
      double value
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer library_c453_string_inc_test(
      RustBuffer value
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer library_c453_byref_inc_test(
      RustBuffer value
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer library_c453_optional_type_inc_test(
      RustBuffer value
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer library_c453_vector_inc_test(
      RustBuffer value
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer library_c453_hash_map_inc_test(
      RustBuffer value
    ,NativeRustError *_Nonnull out_err
    );
void library_c453_void_inc_test(
      int32_t value
    ,NativeRustError *_Nonnull out_err
    );
uint64_t library_c453_error_inc_test(
      uint64_t a,uint64_t b
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer ffi_library_c453_rustbuffer_alloc(
      int32_t size
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer ffi_library_c453_rustbuffer_from_bytes(
      ForeignBytes bytes
    ,NativeRustError *_Nonnull out_err
    );
void ffi_library_c453_rustbuffer_free(
      RustBuffer buf
    ,NativeRustError *_Nonnull out_err
    );
RustBuffer ffi_library_c453_rustbuffer_reserve(
      RustBuffer buf,int32_t additional
    ,NativeRustError *_Nonnull out_err
    );
void ffi_library_c453_string_free(
      const char*_Nonnull cstr
    ,NativeRustError *_Nonnull out_err
    );
